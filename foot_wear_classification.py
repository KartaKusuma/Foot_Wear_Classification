# -*- coding: utf-8 -*-
"""Final_Submission_Foot_Wear_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H-FbYdxz6KiiB7fguQfnMHcL8TKkM0eh
"""

!pip install -q kaggle

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

!kaggle datasets download -d hasibalmuzdadid/shoe-vs-sandal-vs-boot-dataset-15k-images

!mkdir dataset
!unzip -qq shoe-vs-sandal-vs-boot-dataset-15k-images.zip -d dataset
!ls dataset

!ls 'dataset/Shoe vs Sandal vs Boot Dataset'

import os

dataset = os.path.join('/content/dataset/Shoe vs Sandal vs Boot Dataset')
print(os.listdir(dataset))

pip install split-folders

import splitfolders

foot_wear = '/content/foot_wear'
splitfolders.ratio(dataset, output=foot_wear, seed=1337, ratio=(0.8, 0.2))

train_dir = os.path.join(foot_wear, 'train')
val_dir = os.path.join(foot_wear, 'val')

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
    rescale=1.0/255,
    rotation_range=30,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

test_datagen = ImageDataGenerator(
    rescale=1.0/255
)

train_data = train_datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    batch_size=128,
    class_mode='categorical'
)

val_data = test_datagen.flow_from_directory(
    val_dir,
    target_size=(150, 150),
    batch_size=128,
    class_mode='categorical'
)

import tensorflow as tf

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(512, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(
    loss='categorical_crossentropy',
    optimizer=tf.optimizers.Adam(learning_rate=1e-4),
    metrics=['accuracy']
)

model.summary()

val_stop = 0.90

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if (logs.get('accuracy') > val_stop and logs.get('val_accuracy') > val_stop):
      print('\nAccuray mencapai ~90%, training diakhiri!')
      self.model.stop_training = True

callback = myCallback()

num_epochs = 40
history = model.fit(
    train_data,
    steps_per_epoch=25,
    epochs=num_epochs,
    validation_data=val_data,
    validation_steps=5,
    verbose=2,
    callbacks=[callback]
)

import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=(10, 5))
plt.plot(np.arange(0, num_epochs), history.history["accuracy"], label="training")
plt.plot(np.arange(0, num_epochs), history.history["val_accuracy"], label="validation")
plt.title("Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()

plt.style.use("ggplot")
plt.figure(figsize=(10, 5))
plt.plot(np.arange(0, num_epochs), history.history["loss"], label="training")
plt.plot(np.arange(0, num_epochs), history.history["val_loss"], label="validation")
plt.title("Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()

export_dir = 'saved_model/'
tf.saved_model.save(model, export_dir)

converter = tf.lite.TFLiteConverter.from_saved_model(export_dir)
tflite_model = converter.convert()

import pathlib

tflite_model_file = pathlib.Path('vegs.tflite')
tflite_model_file.write_bytes(tflite_model)